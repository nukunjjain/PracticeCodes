package testPackage;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class Customer {
	int balance = 1000;

	synchronized void withdraw(int amount) throws InterruptedException {
		System.out.println("Going to withdraw.........");
		if (balance < amount) {
			System.out.println("Balance is low.........");
			wait();
		}
		System.out.println("Balance updated by deposit.........");
		this.balance = this.balance - amount;
	}

	synchronized void deposit(int amount) {
		System.out.println("Going to deposit.........");
		this.balance = this.balance + amount;
		System.out.println("Deposit Completed.........");
		notify();
	}
}

public class InterThreadCommunication {

	public static void main(String[] args) {

		Customer c = new Customer();
		Thread t1 = new Thread() {
			public void run() {
				try {
					c.withdraw(2000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		};
		t1.start();

		Thread t2 = new Thread() {
			public void run() {

				c.deposit(2000);

			}

		};
		t2.start();
		
		String s ="Nukunj Jain";
	System.out.println("Index of:"+s.indexOf("j"));
	
	
	List<Integer> list2 = List.of(1,2,3,4,5);
	List<Integer> list1 = new ArrayList<>();
	list1.add(1);
	list1.add(2);
	list1.add(3);
	list1.remove(0);
	
	
	LinkedHashSet<Integer> l = new LinkedHashSet<>();
	l.add(5);
	l.add(1);
	l.add(3);
	
	TreeSet<Integer> t = new TreeSet();
	t.add(31);
	t.add(35);
	t.add(33);
	t.remove(33);
	
	
	Map<Integer,String> map = new HashMap();
	map.put(2, "Shyam");
	map.put(1, "Ram");
	map.put(9, "Sanjay");
	map.put(1, "Ramu");
	

	
	
	System.out.println(list1.get(0));
	System.out.println(l);
	System.out.println(t);
	System.out.println(t.higher(32));
	System.out.println(map);
	
	ExecutorService service = Executors.newFixedThreadPool(10);
	//service.su
	
//	int[][] lk = {{1,2,3},{4,5,6}};
//	Arrays.stream(lk).map(ls->ls);
	
	List<List<Integer>> lk = List.of(List.of(1,2,3,4),List.of(1,2,3,4));
	lk.stream().map(ls->ls);

	}

}
